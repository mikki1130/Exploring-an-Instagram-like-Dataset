use ig_clone;

-- QUE 1: HOW MANY TIMES DOES THE AVERAGE USER POST?
-- ANS 1: FOR THIS WE HAVE TO DIVIDE TOTAL NUMBER OF POST FROM TOTAL USERS.

SELECT AVG(POST_COUNT) AS AVERAGE_POST_PER_USERS 
FROM (
SELECT U.ID, COUNT(P.ID) AS POST_COUNT 
FROM USERS U
LEFT JOIN PHOTOS P ON U.ID = P.USER_ID
GROUP BY U.ID
)Â SQ;
------------------------------------------------------------------------------------------------------
-- QUE 2 : FIND THE TOP 5 MOST USED HASHTAGS ?
-- ANS 2 : CREATE A QUERY THAT COUNTS TAG, JOIN WITH PHOTO_TAGS AND ORDER THEM.

SELECT T.ID, COUNT(*) AS TOP_5_TAG_COUNT
FROM TAGS T
INNER JOIN PHOTO_TAGS PT ON T.ID = PT.TAG_ID
GROUP BY T.ID
ORDER BY TOP_5_TAG_COUNT DESC -- MOST USED HASHTAG WILL APPEAR ON TOP.
LIMIT 5;
-------------------------------------------------------------------------------------------------------
-- QUE 3 : FIND USERS WHO HAVE LIKED EVERY SINGLE PHOTO ON THE SITE ?
-- ANS 3 : COUNT LIKES, PHOTOS AND COMPARE THE RESULT WHERE EACH USER LIKED EVERY PHOTO.

SELECT U.ID, COUNT(L.USER_ID) AS TOTAL_LIKES, COUNT(P.PHOTO_ID) AS TOTAL_PHOTO
FROM USERS U
INNER JOIN LIKES L ON U.ID = L.USER_ID
INNER JOIN PHOTO_TAGS P ON L.PHOTO_ID = P.PHOTO_ID
GROUP BY U.ID
HAVING COUNT(L.USER_ID) = COUNT(P.PHOTO_ID);
--------------------------------------------------------------------------------------------------------
-- QUE 4 : RETRIEVE A LIST OF USERS ALONG WITH THEIR USERNAME AND THE RANK OF THEIR ACCOUNT CREATION,
-- ORDERED BY THE CREATION DATE IN ASCENDING ORDER?
-- ANS 4 : SELECT ALL THE COLUMNS FROM USER TABLE AND RANK THEM.

SELECT * FROM USERS;
SELECT ID, USERNAME, RANK() OVER(ORDER BY CREATED_AT) AS USERS_WITH_RANK
FROM USERS;

-------------------------------------------------------------------------------------------------------
-- QUE 5 : LIST THE COMMENTS MADE ON PHOTOS WITH THEIR COMMENT TEXTS, PHOTO URLS, 
--         AND USERNAMES OF USERS WHO POSTED THE COMMENTS. INCLUDE THE COMMENT COUNT FOR EACH PHOTO ?
-- ANS 5 : SELECT THE DESIRED COLUMN AND JOIN THEM TO GET THE O/P.

SELECT C.COMMENT_TEXT, P.IMAGE_URL, U.USERNAME, COUNT(C.ID) AS COMMENT_COUNT
FROM COMMENTS C 
LEFT JOIN PHOTOS P ON C.PHOTO_ID = P.ID
LEFT JOIN USERS  U  ON P.USER_ID = U.ID
GROUP BY P.ID, C.COMMENT_TEXT, P.IMAGE_URL, U.USERNAME
ORDER BY P.ID;

--------------------------------------------------------------------------------------------------------
-- QUE 6 : FOR EACH TAG, SHOW THE TAG NAME AND THE NUMBER OF PHOTOS ASSOCIATED WITH THAT TAG.
--         RANK THE TAGS BY THE NUMBER OF PHOTOS IN DESCENDING ORDER.?
-- ANS 6 : SELECT THE DESIRED COLUMN AND USE RANK FUNCTION LATER JOIN THE TBLE TO GET THE O/P.

SELECT T.ID, T.TAG_NAME, COUNT(P.PHOTO_ID) AS PHOTOS,
RANK() OVER (ORDER BY T.ID DESC) AS NUMBER_OF_PHOTOS
FROM TAGS T
LEFT JOIN PHOTO_TAGS P ON T.ID = P.TAG_ID
GROUP BY T.ID;
--------------------------------------------------------------------------------------------------------
-- QUE 7 : LIST THE USERNAMES OF USERS WHO HAVE POSTED PHOTOS ALONG WITH THE COUNT OF PHOTOS THE HAVE
--         POSTED. RANK THEM BY THE NUMBER OF PHOTOS IN DESCENDING ORDER ?
-- ANS 7 : SELECT DESIRED COLUMN AND USE RANK FUNCTION LATER USE HAVING FILTER TO GET ALL THE USERS
--         WHO HAVE POSTED AT LEAST ONE PHOTO ARE INCLUDED.

SELECT U.username, COUNT(P.ID) AS COUNT, RANK() OVER ( ORDER BY COUNT(P.ID) DESC) AS PHOTO_RANK
FROM USERS U 
LEFT JOIN PHOTOS P ON U.ID = P.USER_ID
GROUP BY U.username
HAVING COUNT(P.ID) > 0 -- ENSURES THAT ONLY WHO HAVE POSTED AT LEAST ONE PHOTO ARE INCLUDED.
ORDER BY COUNT DESC;
---------------------------------------------------------------------------------------------------------
-- QUE 8 : DISPLAY THE USERNAME OF EACH USER ALONG WITH THR CREATION DATE OF THEIR FIRST POSTED PHOTO
--         AND THE CREATION DATE OF THEIR NEXT POSTED PHOTO ?
-- ANS 8 : USE LEAD FUNCTION TO 

SELECT U.USERNAME,
MIN(P.created_at) AS FIRST_PHOTO_CREATION_DATE, -- TO GET THE FIRST PHOTO POSTED BY USER
LEAD(P.created_at) OVER(PARTITION BY U.USERNAME ORDER BY P.created_at) AS NEXT_PHOTO_CREATION_DATE
FROM USERS U
LEFT JOIN PHOTOS P ON U.ID = P.USER_ID -- LEFT JOIN TO ENSURE ALL USERS ARE INCLUDED
GROUP BY U.USERNAME;

---------------------------------------------------------------------------------------------------------
-- QUE 9 : FOR EACH COMMENT, SHOW THE COMMENT TEXT, THE USERNAME OF THE COMMENTER,
--         AND THE COMMENT TEXT OF THE PREVIOUS COMMENT MADE ON THE SAME PHOTO.?
-- ANS 9 : SELECT THE DESIRED COLUMN AND USE LAG WINDOW FUNCTION.


SELECT C.COMMENT_TEXT, U.USERNAME, LAG(C.COMMENT_TEXT) OVER (PARTITION BY C.PHOTO_ID ORDER BY C.CREATED_AT) AS PREVIOUS_COMMENT
FROM COMMENTS C 
LEFT JOIN USERS U ON C.USER_ID = U.ID
ORDER BY C.PHOTO_ID, C.CREATED_AT;
---------------------------------------------------------------------------------------------------------
-- QUE 10 : SHOW THE USERNAME OF EACH USER ALONG WITH THE NUMBER OF PHOTOS THEY HAVE POSTED AND
--      THE NUMBER OF PHOTOS POSTED BY THE USER BEFORE THEM AND AFTER THEM, BASED ON THE CREATION DATE ?
-- ANS 10 : 

SELECT U.USERNAME, COUNT_PHOTO.NUM_PHOTOS, -- WE CALCULATE NUMBER OF PHOTOS FROM SUBQUERY
LAG(P.CREATED_AT) OVER (PARTITION BY U.USERNAME ORDER BY P.CREATED_AT) AS NUM_PHOTO_BEFORE,
LEAD(P.CREATED_AT) OVER (PARTITION BY U.USERNAME ORDER BY P.CREATED_AT) AS NUM_PHOTO_AFTER
FROM USERS U
LEFT JOIN (
SELECT U.USERNAME, COUNT(P.ID) AS NUM_PHOTOS
FROM USERS U
LEFT JOIN PHOTOS P ON U.ID = P.USER_ID
GROUP BY U.USERNAME) COUNT_PHOTO
ON U.USERNAME = COUNT_PHOTO.USERNAME
LEFT JOIN PHOTOS P ON U.ID = P.USER_ID
ORDER BY U.USERNAME;

-- ----------------------------------XXXXXXXXX----------------------------------------------------------








